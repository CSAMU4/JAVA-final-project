package warGame; 
/* Create the class Card with fields (value and name), methods, and getters and setters (describes the description of a card)

import java.util.List; 

public class Card {
    	private String value; 
    	private String name; 
    public Card (String name, String value) {
      this.value = value; 
      this.name = name;
    }
    
    // getters and setters 
    
    public int getValue() {
    	return value; 
    }
    public vpid setValue(int value) {
    	this.value = value;
    }
    public String getName() {
    	return name;
    }
    public void setName(String name){
    	this.name = name; 
    }
  
 
 public void describe() {
 	System.out.println(this.name + " " + this.value);
 }
    @Override 
    public String toString () {
      return value + " of " + name; 
    }
 }
} END CARD CLASS 


import java.util.Collections; 
import java.util.LinkedList; 
import java.util.List; 

public class Deck extends LinkedList<Card> {
    private static final int Rank_start = 2;
    private List<String> cardValue = List.of("Two", "Three", "Four", "Five", "Six" "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace");
    private List<String> cardSuit = List.of("Clubs", "Spades", "Diamonds", "Hearts");
    
 /* Create a class called Deck with fields (cards) and methods (shuffle and draw) 
 
 public Deck () {
  List<Card> cards = new ArrayList<Card>(); 
    Deck() {
      String[] names = {Clubs, Spades, Hearts, Diamonds};
      String[] numbers = {"Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
	for( String name : names) {
	   int i = 2; 
	     for ( String number : numbers) {
	     	String tempName = number of " of " + name; 
	     	int value = i++; 
		Card card = new Card(tempName, value);
			this.cards.add(card);
		}
	}
 }
 public List<Card> getCards() {
 	return cards; 
 }
 public void set.Cards<List<Card> cards) {
 	this.cards = cards; 
 } 
 public void describe() {
 	Collections.shuffle(cards);
 }
 public Card draw() {
 	Card card = this.cards.remove(0);
	return card; 
 }
} END DECK CLASS 

/ Create the class Player with fields (hands, score, name) and methods (describe, flip, draw, increment score)

public class Player {
	List<Card> hand = new ArrayList<Card>(); 
	Deck deck = new Deck(); 
	int score; 
	String name; 
	
  public List<Card> getHand() {
  	return hand; 
  }
  public void setHand(List<Card> hand) {
  	return this.hand = hand; 
  }
  publc int getScore() {
  	return score; 
  }
  public void setScore(int score) {
  	this.score = score; 
  }
  public String getName() {
  	return name; 
  }
  public void setName(String name) {
  	this.name = name; 
  }
  
  public void describe() {
  	System.out.println(this.name);
	System.out.println("      ");
	for(Card card : this.hand){
		card.describe();
	}
  }
  public card flip() {
  	return hand.remove(0);
  }
  public void draw(Deck deck) {
  	getHand.add(deck.cards.remove(0));
  }
  public void incrementScore() {
  	this.score += 1;
  }
 }
    
    @Override
    public String toString() {
        return defaultPlayer;
    }
   
} END PLAYER CLASS 

// ENTIRE GAME 

/* Create an automated verision of WAR using the Classes developed.  

import java.util.LinkedList; 
import java.util.List; 
import java.util.Random; 

public class cardGameWar {
    private List<String> allPlayers = List.of("Candace", "Jeffrey", "Shun", "Pia");
    
    private Random random = new Random(); 
    
    private Player player1: 
    private Player player2: 
    
    Deck deck; 
    
    public static void main (String[] args) {
    
    new cardGameWar().run(); 
    }
    
    private void run() {
        selectPlayers();
        createDeck();
        cardDeal();
        gamePlay();
        getWinner();
        
            System.out.println(player1.getHand());
            System.out.println(player2.getHand());
    }
    
    private void getWinner() {
        if (player1.getScore() > player2.getScore()) {
            printWinner(player1);
            printLoser(player2);
        }
        
        else if (player2.getScore() > player1.getScore()) {
            printWinner(player2);
            printLoser(player1);
        }
        
        else {
            printDraw(player1, player2);
        }
        
    private void printDraw(Player player1, Player player2) {
        System.out.println(" It's a draw between " + player1 + " and " + player2 + "! Demand a rematch.);
    }
    private void printWinner(Player winner) {
       System.out.println(winner + " is the winner with a score of " + winner.getScore()) ". Great job!"; 
    }
    private void printLoser(Player loser) {
        System.out.println(loser + " is the loser with a score of " + loser.getScore() + ". Better luck next time!);
    }
    
    private void gamePlay () {
    int turns = player1.getHand.size();
    
        for (int turn = 0; turn < turns; turn ++) {
            playersFlipCards();
        }
    }
    private void playersFlipCards() {
        Card card1 = player1.flip(); 
        Card card2 = player2.flip();
            System.out.println(player1 + " is holding " + card1 + " and " + player2 + " is holding " + card2); 
    
    if (card1.getRank() > card2.getRank()) {
			player1.addscore();
			System.out.println("* " + player1 + " wins");
		}
	
		else if (card2.getRank() > card1.getRank()) {
			player2.addscore();
			System.out.println("* " + player2 + " wins");
		}
		
		else {
			System.out.println("It's a Tie!");
		}
	}

	private void cardDeal() {
		int size = deck.size();
		for (int index = 0; index < size; index ++ ) {
			
			if (index % 2 == 0 ) {
				player1.draw(deck);
			} else {
				
				player2.draw(deck);
			}
		}
		
	}

	private void createDeck() {
		// TODO Auto-generated method stub
		
		deck = new Deck ();
		deck.shuffle();
		//System.out.println(deck);
		
	}

	private void selectPlayers() {
		// TODO Auto-generated method stub
		
		List<String> names = new LinkedList<>(PrincessPlayers);
		
		player1 = selectPlayer(names);
		player2 = selectPlayer(names);
		
		System.out.println(player1 + " is playing " + player2);
		
	}

	private Player selectPlayer(List<String> names) {
		// TODO Auto-generated method stub
		int pos = random.nextInt(names.size());
		String princess = names.remove(pos);
		return new Player(princess);
	}
}
} END MAIN CLASS 
